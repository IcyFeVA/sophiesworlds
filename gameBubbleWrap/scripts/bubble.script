function init(self)
	-- Set random color for this bubble
	self.popped = false
	self.original_scale = go.get_scale()
	
	-- Set bubble color based on properties passed from factory
	local props = go.get("#sprite", "tint")
	if props then
		-- Could set specific colors here, for now use random bright colors
		local colors = {
			vmath.vector4(1.0, 0.2, 0.2, 1.0),  -- red
			vmath.vector4(0.2, 0.2, 1.0, 1.0),  -- blue  
			vmath.vector4(0.2, 1.0, 0.2, 1.0),  -- green
			vmath.vector4(1.0, 1.0, 0.2, 1.0),  -- yellow
			vmath.vector4(1.0, 0.2, 1.0, 1.0),  -- purple
			vmath.vector4(1.0, 0.6, 0.2, 1.0)   -- orange
		}
		local color = colors[math.random(1, #colors)]
		go.set("#sprite", "tint", color)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("pop") and not self.popped then
		animatePopBubble(self)
	end
end

function animatePopBubble(self)
	-- Prevent double pops
	self.popped = true
	
	-- Play pop sound with random pitch variation
	sound.play("/soundfx#pop", {speed = math.random(80, 120) / 100})
	
	-- Start pop animation: scale up quickly then fade out
	local scale_up = vmath.vector3(1.3, 1.3, 1.0)
	local scale_down = vmath.vector3(0.1, 0.1, 1.0)
	
	-- Scale up animation
	go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, scale_up, go.EASING_OUTBACK, 0.15, 0, function()
		-- After scale up, fade out while scaling down
		go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, scale_down, go.EASING_INBACK, 0.2)
		go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_INQUAD, 0.2, 0, function()
			-- Notify spawner that this bubble was popped
			msg.post("/bubbleGridSpawner#bubbleGridSpawner", "bubble_popped", {
				bubble_id = go.get_id()
			})
			-- Delete the bubble
			go.delete()
		end)
	end)
end
