function init(self)
    -- Game data - matching controller
    self.games = {
        {
            id = "bubbles",
            title = "Bubble Pop", 
            color = vmath.vector4(0.3, 0.7, 1.0, 1.0),
            description = "Pop floating bubbles!"
        },
        {
            id = "bubblewrap", 
            title = "Bubble Wrap",
            color = vmath.vector4(1.0, 0.4, 0.6, 1.0),
            description = "Pop all the bubbles!"
        },
        {
            id = "xylophone",
            title = "Xylophone",
            color = vmath.vector4(0.9, 0.7, 0.2, 1.0),
            description = "Make music!"
        }
    }
    
    self.scroll_position = 0
    self.button_width = 250
    self.button_height = 350
    self.button_spacing = 30
    self.created_buttons = false
    
    -- Create buttons immediately
    createGameButtons(self)
    
    print("Game Selector GUI initialized with " .. #self.games .. " games")
end

function on_message(self, message_id, message, sender)
    if message_id == hash("update_scroll") then
        self.scroll_position = message.scroll_position
        updateButtonPositions(self)
    elseif message_id == hash("disable") then
        -- Hide all GUI nodes
        for i, game in ipairs(self.games) do
            pcall(function()
                gui.set_enabled(gui.get_node("game_button_bg_" .. game.id), false)
                gui.set_enabled(gui.get_node("game_shadow_" .. game.id), false)
                gui.set_enabled(gui.get_node("game_title_" .. game.id), false)
                gui.set_enabled(gui.get_node("game_desc_" .. game.id), false)
                gui.set_enabled(gui.get_node("game_button_" .. game.id), false)
            end)
        end
        -- Hide title
        pcall(function()
            gui.set_enabled(gui.get_node("title"), false)
        end)
    elseif message_id == hash("enable") then
        -- Show all GUI nodes
        for i, game in ipairs(self.games) do
            pcall(function()
                gui.set_enabled(gui.get_node("game_button_bg_" .. game.id), true)
                gui.set_enabled(gui.get_node("game_shadow_" .. game.id), true)
                gui.set_enabled(gui.get_node("game_title_" .. game.id), true)
                gui.set_enabled(gui.get_node("game_desc_" .. game.id), true)
                gui.set_enabled(gui.get_node("game_button_" .. game.id), true)
            end)
        end
        -- Show title
        pcall(function()
            gui.set_enabled(gui.get_node("title"), true)
        end)
    end
end

function createGameButtons(self)
    if self.created_buttons then return end
    
    -- Create game buttons once
    for i, game in ipairs(self.games) do
        createGameButton(self, game, i)
    end
    
    -- Initial position update
    updateButtonPositions(self)
    
    self.created_buttons = true
end

function updateButtonPositions(self)
    -- Update positions of existing buttons based on scroll
    for i, game in ipairs(self.games) do
        local start_x = 480 - self.scroll_position  -- Screen center minus scroll
        local x = start_x + (i - 1.5) * (self.button_width + self.button_spacing)  -- -1.5 to center the middle button
        
        -- Update button background position
        pcall(function()
            local bg_node = gui.get_node("game_button_bg_" .. game.id)
            gui.set_position(bg_node, vmath.vector3(x, 270, 0))
        end)
        
        -- Update shadow position
        pcall(function()
            local shadow_node = gui.get_node("game_shadow_" .. game.id)
            gui.set_position(shadow_node, vmath.vector3(x + 3, 267, -0.1))
        end)
        
        -- Update title position
        pcall(function()
            local title_node = gui.get_node("game_title_" .. game.id)
            gui.set_position(title_node, vmath.vector3(x, 320, 0.1))
        end)
        
        -- Update description position
        pcall(function()
            local desc_node = gui.get_node("game_desc_" .. game.id)
            gui.set_position(desc_node, vmath.vector3(x, 220, 0.1))
        end)
        
        -- Update clickable area position
        pcall(function()
            local click_node = gui.get_node("game_button_" .. game.id)
            gui.set_position(click_node, vmath.vector3(x, 270, 0.2))
        end)
    end
end

function createGameButton(self, game, index)
    -- Calculate initial position
    local start_x = 480  -- Screen center
    local x = start_x + (index - 1.5) * (self.button_width + self.button_spacing)
    local y = 270  -- Center vertically
    
    print("Creating button for " .. game.title .. " at position " .. x .. ", " .. y)
    
    -- Create shadow first (behind button)
    local shadow = gui.new_box_node(vmath.vector3(x + 3, y - 3, -0.1), vmath.vector3(self.button_width, self.button_height, 0))
    gui.set_id(shadow, "game_shadow_" .. game.id)
    gui.set_color(shadow, vmath.vector4(0, 0, 0, 0.2))  -- Subtle shadow
    
    -- Create button background (portrait rectangle)
    local button_bg = gui.new_box_node(vmath.vector3(x, y, 0), vmath.vector3(self.button_width, self.button_height, 0))
    gui.set_id(button_bg, "game_button_bg_" .. game.id)
    gui.set_color(button_bg, game.color)
    
    -- Create title text (bigger and higher)
    local title_text = gui.new_text_node(vmath.vector3(x, y + 50, 0.1), game.title)
    gui.set_id(title_text, "game_title_" .. game.id)
    gui.set_font(title_text, "system_font")
    gui.set_color(title_text, vmath.vector4(1, 1, 1, 1))  -- White text
    gui.set_pivot(title_text, gui.PIVOT_CENTER)
    gui.set_scale(title_text, vmath.vector3(1.2, 1.2, 1))  -- Larger title
    
    -- Create description text (smaller, below title)
    local desc_text = gui.new_text_node(vmath.vector3(x, y - 50, 0.1), game.description)
    gui.set_id(desc_text, "game_desc_" .. game.id)
    gui.set_font(desc_text, "system_font")
    gui.set_color(desc_text, vmath.vector4(1, 1, 1, 0.9))  -- Slightly transparent white
    gui.set_pivot(desc_text, gui.PIVOT_CENTER)
    gui.set_scale(desc_text, vmath.vector3(0.7, 0.7, 1))  -- Smaller description
    
    -- Create invisible clickable area for touch input
    local click_area = gui.new_box_node(vmath.vector3(x, y, 0.2), vmath.vector3(self.button_width, self.button_height, 0))
    gui.set_id(click_area, "game_button_" .. game.id)
    gui.set_color(click_area, vmath.vector4(1, 1, 1, 0))  -- Completely invisible
end

function on_input(self, action_id, action)
    -- Handle button clicks directly (simple approach)
    if action_id == hash("touch") and action.pressed then
        -- Check if touch is on any button
        for i, game in ipairs(self.games) do
            pcall(function()
                local click_node = gui.get_node("game_button_" .. game.id)
                if click_node and gui.pick_node(click_node, action.x, action.y) then
                    -- Button pressed - add press animation
                    pcall(function()
                        local bg_node = gui.get_node("game_button_bg_" .. game.id)
                        gui.animate(bg_node, gui.PROP_SCALE, vmath.vector3(0.9, 0.9, 1), gui.EASING_OUTQUAD, 0.1, 0, function()
                            gui.animate(bg_node, gui.PROP_SCALE, vmath.vector3(1.0, 1.0, 1), gui.EASING_OUTQUAD, 0.1)
                        end)
                    end)
                    
                    -- Launch the game
                    msg.post("controller#controller", "launch_game", {game_id = game.id})
                    return true  -- Consume the input
                end
            end)
        end
    end
    
    return false  -- Let controller handle scrolling
end

function update(self, dt)
    -- This will be called by the controller to update scroll position
    
end
