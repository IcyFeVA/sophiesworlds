-- Simple Game Selector GUI
-- Creates buttons for each game

function init(self)
    print("GameSelector GUI: Initializing...")
    msg.post(".", "acquire_input_focus")
    
    -- Game data
    self.games = {
        {id = "bubbles", name = "Bubble Pop", color = vmath.vector4(0.3, 0.7, 1.0, 1.0)},
        {id = "bubblewrap", name = "Bubble Wrap", color = vmath.vector4(1.0, 0.4, 0.6, 1.0)},
        {id = "xylophone", name = "Xylophone", color = vmath.vector4(0.9, 0.7, 0.2, 1.0)},
        {id = "fireworks", name = "Fireworks", color = vmath.vector4(1.0, 0.2, 0.8, 1.0)}
    }
    
    self.enabled = true
    
    -- Create game buttons
    create_buttons(self)
    
    print("GameSelector GUI: Ready")
end

function final(self)
    msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
    if message_id == hash("disable") then
        self.enabled = false
        hide_buttons(self)
        print("GameSelector GUI: Disabled")
    elseif message_id == hash("enable") then
        self.enabled = true
        show_buttons(self)
        print("GameSelector GUI: Enabled")
    elseif message_id == hash("input") then
        -- Handle forwarded input from main
        print("GameSelector GUI: Received forwarded input")
        handle_input(self, message.action_id, message.action)
    end
end

function handle_input(self, action_id, action)
    -- DEBUG: Log input received by GUI
    if action_id and action_id ~= hash("") and action_id ~= hash("gamepad_connected") then
        print("GameSelector GUI: HANDLING INPUT: " .. tostring(action_id) .. " enabled=" .. tostring(self.enabled) .. " pressed=" .. tostring(action.pressed or false))
    end
    
    if not self.enabled then
        print("GameSelector GUI: Input received but GUI is disabled!")
        return false
    end
    
    if action_id == hash("touch") and action.pressed then
        local touch_x = action.screen_x or action.x
        local touch_y = action.screen_y or action.y
        
        print("GameSelector GUI: Touch at " .. (touch_x or 0) .. ", " .. (touch_y or 0))
        
        -- Check which button was clicked
        for i, game in ipairs(self.games) do
            local button_node = gui.get_node("button_" .. game.id)
            if button_node and gui.pick_node(button_node, touch_x, touch_y) then
                print("GameSelector GUI: Clicked " .. game.name)
                
                -- Animate button press
                gui.animate(button_node, gui.PROP_SCALE, vmath.vector3(0.9, 0.9, 1), gui.EASING_OUTQUAD, 0.1, 0, function()
                    gui.animate(button_node, gui.PROP_SCALE, vmath.vector3(1.0, 1.0, 1), gui.EASING_OUTQUAD, 0.1)
                end)
                
                -- Launch game via main script
                msg.post("main:/go#main", "launch_game", {game_id = game.id})
                return true
            end
        end
    end
    
    return false
end

function on_input(self, action_id, action)
    return handle_input(self, action_id, action)
end

function create_buttons(self)
    local button_width = 200
    local button_height = 100
    local spacing = 50
    local start_x = 480 - ((#self.games - 1) * (button_width + spacing)) / 2
    
    for i, game in ipairs(self.games) do
        local x = start_x + (i - 1) * (button_width + spacing)
        local y = 270
        
        -- Create button background
        local button = gui.new_box_node(vmath.vector3(x, y, 0), vmath.vector3(button_width, button_height, 0))
        gui.set_id(button, "button_" .. game.id)
        gui.set_color(button, game.color)
        
        -- Create button text
        local text = gui.new_text_node(vmath.vector3(x, y, 0.1), game.name)
        gui.set_id(text, "text_" .. game.id)
        gui.set_font(text, "system_font")
        gui.set_color(text, vmath.vector4(1, 1, 1, 1))
        gui.set_pivot(text, gui.PIVOT_CENTER)
        
        print("GameSelector GUI: Created button for " .. game.name)
    end
end

function hide_buttons(self)
    for _, game in ipairs(self.games) do
        gui.set_enabled(gui.get_node("button_" .. game.id), false)
        gui.set_enabled(gui.get_node("text_" .. game.id), false)
    end
    gui.set_enabled(gui.get_node("title"), false)
end

function show_buttons(self)
    for _, game in ipairs(self.games) do
        gui.set_enabled(gui.get_node("button_" .. game.id), true)
        gui.set_enabled(gui.get_node("text_" .. game.id), true)
    end
    gui.set_enabled(gui.get_node("title"), true)
end