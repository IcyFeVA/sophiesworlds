math.randomseed(os.time())

function init(self)
	msg.post(".", "acquire_input_focus")

	rendercam = require "rendercam.rendercam"
	
	lastTouchPos = vmath.vector3()

	particlefx.play('/groundBubbles')
	particlefx.play('/sunRays')	
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)

end

function on_message(self, message_id, message, sender)
	if message_id == hash("window_resized") then
		print('window resized to ' .. message.width .. ' x ' .. message.height)
	end
end

function on_input(self, action_id, action)
	local pos = vmath.vector3(action.x, action.y, 0)
	-- delete while finger is down
	deleteBubble(action)
	
	if action_id == hash("touch") then
		if action.pressed then
			-- delete only on tap
			--deleteBubble(action)		
		end
	end
end

function on_reload(self)
	
end

function tablelength(T)
	local count = 0
	for k,v in pairs(T) do
		if v then
			count = count + 1 
		end 
	end
	return count
end

function deleteBubble(tapPos)
	for i=0, tablelength(bubbles) do
		if bubbles[i] then
			local stow = rendercam.screen_to_world_2d(tapPos.screen_x, tapPos.screen_y)
			local bble = bubbles[i]
			local bbPos = go.get_position(bble)
			local dist = stow - bbPos

			if math.abs(dist.x) < 60 and math.abs(dist.y) < 60 then
				for _,v in pairs(bubbles) do
					if bble == bubbles[_] then
						table.remove(bubbles, _)
						go.delete(bble)

						lastTouchPos = bbPos
						msg.post("/particleSpawner#particleSpawner", "POP")

						sound.play("/soundfx#pop", {speed = math.random(70, 100) / 100})
						break
					end
				end
			end
		end
	end
end




